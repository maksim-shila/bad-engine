import { Animator, Collider, Collision, CollisionDirection, FrameTimer, Hitbox, RigidBody, Scene } from "..";
declare type Direction = "right" | "left" | "top" | "bottom";
export declare abstract class GameObject {
    readonly type: string;
    readonly scene: Scene;
    width: number;
    height: number;
    readonly GlobalType = "object";
    private _collider;
    private _rigidBody;
    private _animator;
    private _hitbox;
    private _destroyActions;
    private _destroyed;
    x: number;
    y: number;
    vx: number;
    vy: number;
    name: string;
    constructor(type: string, scene: Scene, width?: number, height?: number);
    get hitbox(): Hitbox | null;
    set hitbox(value: Hitbox | null);
    get collider(): Collider | null;
    protected set collider(value: Collider | null);
    get rigidBody(): RigidBody | null;
    protected set rigidBody(value: RigidBody | null);
    get animator(): Animator | null;
    protected set animator(value: Animator | null);
    get onGround(): boolean;
    get weight(): number;
    get rx(): number;
    get ry(): number;
    get cx(): number;
    get cy(): number;
    get drawX(): number;
    get drawY(): number;
    get destroyed(): boolean;
    onDestroy(callback: (self: GameObject) => unknown): void;
    destroy(): void;
    update(frameTimer: FrameTimer): void;
    draw(context: CanvasRenderingContext2D): void;
    onCollisionEnter?(collision: Collision): void;
    onCollision?(collision: Collision): void;
    onObstacleCollisions?(directions: CollisionDirection[]): void;
    onCollisionExit?(collision: Collision): void;
    isOffscreen(directions?: Direction[]): boolean;
    isTouching(...directions: Direction[]): boolean;
    resetPosition(direction: Direction): void;
    disallowOffscreen(direction: Direction): void;
}
export {};
